---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-rahmana3r>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_html, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
  `Long Name`
from
  world_bank_data.wdi_country
where
  `Region` is null
""")

```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
drop table if exists peopleroles;
drop table if exists peopleskills;
drop table if exists roles;
drop table if exists people;
drop table if exists skills;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
create table sp25_rahmana17_user as
select
*
from world_bank_data.wdi_country
where
  not region is NULL

""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select count(*) from sp25_rahmana17_user
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select count(*) from sp25_rahmana17_user
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select 
  `Region`
from 
  sp25_rahmana17_user
group by
  `Region`
order by
  `Region`
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select 
  `Region`, count(*) as "Count"
from 
  sp25_rahmana17_user
group by
  `Region`
order by
  `Count` desc
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select
  `Long Name`,
  `Region`
from
  sp25_rahmana17_user
where
  `Region` = 'North America'


""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
  `Region`,
  `Short Name`,
  `Long Name`
from
  sp25_rahmana17_user
where
  `Short Name` = 'Qatar'

""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Country Code`, `Short Name`, `2-alpha code`, `WB-2 code`, `Region`
from sp25_rahmana17_user
where
   `2-alpha code` <> `WB-2 code`

""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT
  `Income Group`,
  COUNT(*) AS country_count
FROM
  world_bank_data.wdi_country
GROUP BY
  `Income Group`
ORDER BY
  country_count DESC;
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
SELECT
  `Country Code`,
  `Short Name`,
  `Income Group`
FROM
  sp25_rahmana17_user
WHERE
  `Income Group` IS NULL
  AND `Short Name` = 'Venezuela, RB';

""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx, """
UPDATE
  sp25_rahmana17_user
SET
  `Income Group` = 'High income'
WHERE
  `Short Name` = 'Venezuela, RB';
""")



```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
SELECT
  `Country Code`   ,
  `Short Name`    , 
  `Income Group`   
FROM
  sp25_rahmana17_user
WHERE
  `Country Code` = 'VEN'

""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  `Region`,
  `Income Group`,
  count(*) as no_of_countries
from
  sp25_rahmana17_user
where
  `Income Group` is not null
group by
  `Region`,
  `Income Group`
order by
  `Region`,
  `Income Group`
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
SELECT
  `Region`                                          AS region,
  SUM(CASE WHEN `Income Group` = 'High income'         THEN 1.0 ELSE 0.0 END) AS high_income,
  SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN 1.0 ELSE 0.0 END) AS upper_middle_income,
  SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN 1.0 ELSE 0.0 END) AS lower_middle_income,
  SUM(CASE WHEN `Income Group` = 'Low income'          THEN 1.0 ELSE 0.0 END) AS low_income,
  SUM(1.0)                                                AS total_countries
FROM
  sp25_rahmana17_user
GROUP BY
  `Region`
ORDER BY
  `Region`
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select
  count(*)                as low_income_count,
  `Region`,
  'Low income'           as income_group
from
  sp25_rahmana17_user
where
  `Income Group` = 'Low income'
group by
  `Region`
order by
  low_income_count desc
limit 1
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
select
  `Country Code`,
  `Short Name`,
  `Region`,
  `Income Group`
from
  sp25_rahmana17_user
where
  `Region` = (
    select `Region`
    from sp25_rahmana17_user
    where `Country Code` = 'MHL'
  )
  and `Income Group` = (
    select `Income Group`
    from sp25_rahmana17_user
    where `Country Code` = 'MHL'
  )
order by
  `Short Name`
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
select
  r.region,
  i.income_group,
  coalesce(count(w.`Country Code`),0) as cnt
from
  (select distinct region from sp25_rahmana17_user)                 as r
cross join
  (select distinct `Income Group` as income_group
     from sp25_rahmana17_user
    where `Income Group` is not null)                      as i
left join
  sp25_rahmana17_user w
    on w.region       = r.region
   and w.`Income Group` = i.income_group
group by
  r.region, i.income_group
having
  cnt = 0
order by
  r.region, i.income_group
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
with pair_counts as (
  select
    region,
    `Income Group`    as income_group,
    count(*)          as country_count
  from
    sp25_rahmana17_user
  group by
    region,
    `Income Group`
),
region_totals as (
  select
    region,
    sum(country_count) as region_total
  from
    pair_counts
  group by
    region
),
income_totals as (
  select
    income_group,
    sum(country_count) as income_total
  from
    pair_counts
  group by
    income_group
),
grand_total as (
  select
    sum(country_count) as total_countries
  from
    pair_counts
)
select
  p.region,
  p.income_group,
  p.country_count,
  r.region_total,
  i.income_total,
  g.total_countries,
  round(p.country_count / g.total_countries * 100, 2) as percent_of_total
from
  pair_counts p
  join region_totals r on p.region      = r.region
  join income_totals i on p.income_group = i.income_group
  cross join grand_total g
order by
  p.region,
  p.income_group
""")


```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
select
  region,
  round(sum(case when `Income Group` = 'High income'         then 1 else 0 end)
        / (select count(*) from sp25_rahmana17_user) * 100, 2) as high_income_pct,
  round(sum(case when `Income Group` = 'Upper middle income' then 1 else 0 end)
        / (select count(*) from sp25_rahmana17_user) * 100, 2) as upper_middle_income_pct,
  round(sum(case when `Income Group` = 'Lower middle income' then 1 else 0 end)
        / (select count(*) from sp25_rahmana17_user) * 100, 2) as lower_middle_income_pct,
  round(sum(case when `Income Group` = 'Low income'          then 1 else 0 end)
        / (select count(*) from sp25_rahmana17_user) * 100, 2) as low_income_pct,
  round(sum(case when `Income Group` is null                 then 1 else 0 end)
        / (select count(*) from sp25_rahmana17_user) * 100, 2) as other_pct
from
  sp25_rahmana17_user
group by
  region
order by
  region
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
SELECT
  COALESCE(`Income Group`, 'High income') AS income_group,
  COUNT(*) AS country_count,
  (SELECT COUNT(*) FROM sp25_rahmana17_user) AS total_countries,
  ROUND(
    COUNT(*) / (SELECT COUNT(*) FROM sp25_rahmana17_user) * 100,
    1
  ) AS percent_of_total
FROM
  sp25_rahmana17_user
GROUP BY
  `Income Group`
ORDER BY
  country_count DESC
""")

```


# Reflection
This assignment helped reinforce my SQL skills in aggregation, grouping, joins, and complex queries with subqueries and CTEs. I feel most confident with basic SELECT queries and aggregations, but the more advanced tasks with multiple CTEs and complex joins still require more practice.

For the complex tasks (18, 19, 20), I broke them down by:
First understanding what data I needed
Identifying the intermediate tables/CTEs required
Building each component step by step
Testing each intermediate result
Combining them together.If I encountered challenges, I would simplify the query or break it into smaller parts. In the future, I would start by sketching out the query structure before coding.

The biggest takeaways were:
How to structure complex analytical queries
The power of CTEs for breaking down problems
Techniques for data pivoting in SQL
Calculating percentages and ratios
These skills are directly applicable to real-world data analysis tasks where you need to summarize and analyze large datasets.



# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::
